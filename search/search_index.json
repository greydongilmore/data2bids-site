{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"An open-source software to sort EDF/EDF+ files into a BIDs compliant structure European Data Format (EDF) \u00b6 The European Data Format (EDF) is a simple and flexible format for exchange and storage of multichannel biological and physical signals. It was developed by a few European medical engineers who first met at the 1987 international Sleep Congress in Copenhagen. In March 1990, they agreed upon a very simple file format to exchange their sleep recordings. This format became known as the European Data Format . An extension of EDF, named EDF+, was developed in 2002 and is largely compatible to EDF. However, the EDF+ format provides a few advantages: the files can contain interrupted recordings, annotations can be stored within the file along with stimuli/events. Medical type recordings often contain annotations about patient events, stimulation responses and are often discontinuos as the patient may require breaks during recording time. EDF+ allows for these medical type recordings to be stored much easier. The full specifications can be found on the EDF website . The site also supports users and developers by offering free downloads of files and software, a list of EDF(+) compatible companies and further contact possibilities. EDF File Structure \u00b6 EDF/EDF+ files consist of a header (ascii) that describes the contents of the file and the experimental settings. The data (int16) are stored after the header. The Header \u00b6 The EDF/EDF+ header is split into two parts: measurement info and channel info. The measurement info contains general information about the recording while the channel info contains specific information about each channel used to record. Thus, the length of the full header (the \u2018header record\u2019) equals: measurement info (256) + channel info (number of channels * 256) The header record is ascii only, and contains the following fields: Measurement Info \u00b6 The first 256 bytes in an EDF/EDF+ file is allocated to the measurement info (i.e. patient info, date and time of data acquisition, etc.). Field Size Position Notes version 8 0 version is always 0 patient id 80 8 Code Sex DOB Name 1 recording id 80 88 Startdate start_date ExpID InvestigID Equipment 2 startdate 8 168 dd.mm.yy starttime 8 176 hh.mm.ss number of bytes in header 8 184 reserved 44 192 EDF : empty EDF+ : EDF+C for continuous; EDF+D for discontinuous number of data records 8 236 nr duration of data record 8 244 in seconds number of signals 4 252 ns total 256 [1] patient id Code: hospital subject code Sex: F or M DOB: birthdate in dd-MMM-yyyy Name: the patients name e.g. MCH-0234567 F 02-MAY-1951 Haagse_Harry [2] recording id Startdate: the text Startdate start_date: start date itself in dd-MMM-yyyy InvestigID: a code specifying the technition/clinician Equipment: a code specifying used equipment e.g. Startdate 02-MAR-2002 PSG-1234/2002 NN Telem03 Channel Info \u00b6 The channel info record is 256 bytes and each channel has its own channel info record. For instance, if 10 channels are used to record then there would be 10 * channel info records within the EDF/EDF+ header. For each channel, the following information is stored: Field Size Position Notes label 16 0 transducer 80 16 transducer type (i.e AgAgCl electrode) physical dim 8 96 physical dimension of channel data (i.e. \u03bcV) physical min 8 104 physical max 8 112 digital min 8 120 1 digital max 8 128 1 prefiltering 80 136 high-pass, low-pass and notch filters 2 number of samples 8 216 reserved 32 224 total 256 [1] digital min/max digital range must be somewhere between -32768 and 32767 (because data samples are 16-bit signed integers) [2] prefiltering HighPass: HP LowPass: LP Notch: N e.g. HP:0.1Hz LP:75Hz N:60Hz After the channel info header blocks there are 256 bytes for each channel acquired. Note each field in the channel info record holds the values for all channels (rather than the header storing one full channel record, then a second full channel record, etc). That is, if e.g. two channels are acquired, then there will be two consecutive label fields (16 + 16 bytes), then two consecutive transducer fields (80 + 80 bytes), then two physical dim fields (8 + 8 bytes), etc. Data Record \u00b6 Data records follow after the header record. Here, data samples (of type int16) are stored in blocks ('data record'). Each block contains the samples acquired during a period of time specified in the header as duration of data record , and the total number of blocks in the file are number of data records . Note Note that EDF allows the acquisition of signals at different sampling rates; the number of samples per signal in each data block is in the signal header as number of samples in data record . For example, two signals signal_A and signal_B are acquired at 100 Hz and 5 Hz respectively. The data are saved every 20 seconds ( duration of data record = 20). Thus, one block of data (a data record)will consist of 2000 samples ( number of samples in data record = 100 Hz * 20 secs = 2000) from signal_A followed by 100 samples ( number of samples in data record = 5 Hz * 20 seconds = 100) from signal_B. If the header indicates that there are 70 such blocks ( number of data records = 70 ), then the total duration of the recording would be 70 x 20 = 1400 seconds ( number of data records * duration of data record ). EDF File Structure Diagram \u00b6","title":"Home"},{"location":"index.html#european-data-format-edf","text":"The European Data Format (EDF) is a simple and flexible format for exchange and storage of multichannel biological and physical signals. It was developed by a few European medical engineers who first met at the 1987 international Sleep Congress in Copenhagen. In March 1990, they agreed upon a very simple file format to exchange their sleep recordings. This format became known as the European Data Format . An extension of EDF, named EDF+, was developed in 2002 and is largely compatible to EDF. However, the EDF+ format provides a few advantages: the files can contain interrupted recordings, annotations can be stored within the file along with stimuli/events. Medical type recordings often contain annotations about patient events, stimulation responses and are often discontinuos as the patient may require breaks during recording time. EDF+ allows for these medical type recordings to be stored much easier. The full specifications can be found on the EDF website . The site also supports users and developers by offering free downloads of files and software, a list of EDF(+) compatible companies and further contact possibilities.","title":"European Data Format (EDF)"},{"location":"index.html#edf-file-structure","text":"EDF/EDF+ files consist of a header (ascii) that describes the contents of the file and the experimental settings. The data (int16) are stored after the header.","title":"EDF File Structure"},{"location":"index.html#the-header","text":"The EDF/EDF+ header is split into two parts: measurement info and channel info. The measurement info contains general information about the recording while the channel info contains specific information about each channel used to record. Thus, the length of the full header (the \u2018header record\u2019) equals: measurement info (256) + channel info (number of channels * 256) The header record is ascii only, and contains the following fields:","title":"The Header"},{"location":"index.html#measurement-info","text":"The first 256 bytes in an EDF/EDF+ file is allocated to the measurement info (i.e. patient info, date and time of data acquisition, etc.). Field Size Position Notes version 8 0 version is always 0 patient id 80 8 Code Sex DOB Name 1 recording id 80 88 Startdate start_date ExpID InvestigID Equipment 2 startdate 8 168 dd.mm.yy starttime 8 176 hh.mm.ss number of bytes in header 8 184 reserved 44 192 EDF : empty EDF+ : EDF+C for continuous; EDF+D for discontinuous number of data records 8 236 nr duration of data record 8 244 in seconds number of signals 4 252 ns total 256 [1] patient id Code: hospital subject code Sex: F or M DOB: birthdate in dd-MMM-yyyy Name: the patients name e.g. MCH-0234567 F 02-MAY-1951 Haagse_Harry [2] recording id Startdate: the text Startdate start_date: start date itself in dd-MMM-yyyy InvestigID: a code specifying the technition/clinician Equipment: a code specifying used equipment e.g. Startdate 02-MAR-2002 PSG-1234/2002 NN Telem03","title":"Measurement Info"},{"location":"index.html#channel-info","text":"The channel info record is 256 bytes and each channel has its own channel info record. For instance, if 10 channels are used to record then there would be 10 * channel info records within the EDF/EDF+ header. For each channel, the following information is stored: Field Size Position Notes label 16 0 transducer 80 16 transducer type (i.e AgAgCl electrode) physical dim 8 96 physical dimension of channel data (i.e. \u03bcV) physical min 8 104 physical max 8 112 digital min 8 120 1 digital max 8 128 1 prefiltering 80 136 high-pass, low-pass and notch filters 2 number of samples 8 216 reserved 32 224 total 256 [1] digital min/max digital range must be somewhere between -32768 and 32767 (because data samples are 16-bit signed integers) [2] prefiltering HighPass: HP LowPass: LP Notch: N e.g. HP:0.1Hz LP:75Hz N:60Hz After the channel info header blocks there are 256 bytes for each channel acquired. Note each field in the channel info record holds the values for all channels (rather than the header storing one full channel record, then a second full channel record, etc). That is, if e.g. two channels are acquired, then there will be two consecutive label fields (16 + 16 bytes), then two consecutive transducer fields (80 + 80 bytes), then two physical dim fields (8 + 8 bytes), etc.","title":"Channel Info"},{"location":"index.html#data-record","text":"Data records follow after the header record. Here, data samples (of type int16) are stored in blocks ('data record'). Each block contains the samples acquired during a period of time specified in the header as duration of data record , and the total number of blocks in the file are number of data records . Note Note that EDF allows the acquisition of signals at different sampling rates; the number of samples per signal in each data block is in the signal header as number of samples in data record . For example, two signals signal_A and signal_B are acquired at 100 Hz and 5 Hz respectively. The data are saved every 20 seconds ( duration of data record = 20). Thus, one block of data (a data record)will consist of 2000 samples ( number of samples in data record = 100 Hz * 20 secs = 2000) from signal_A followed by 100 samples ( number of samples in data record = 5 Hz * 20 seconds = 100) from signal_B. If the header indicates that there are 70 such blocks ( number of data records = 70 ), then the total duration of the recording would be 70 x 20 = 1400 seconds ( number of data records * duration of data record ).","title":"Data Record"},{"location":"index.html#edf-file-structure-diagram","text":"","title":"EDF File Structure Diagram"},{"location":"installation.html","text":"Installation \u00b6 There are a few ways to install edf2bids . For those looking to simply run the software you should install a compiled version . Obtain pre-compiled versions \u00b6 Windows \u00b6 For 32-bit and 64-bit Windows download and extract this folder . Compile from source \u00b6 The source code can be download from the GitHub repository . Python Setup \u00b6 First you will need to install Python, depending on what operating system you are using there are different approaches. Windows \u00b6 You will need to download the windows python installer . Underneath the heading at the top that says Python Releases for Windows, click on the link for the Latest Python 3 Release - Python 3.x.x Scroll to the bottom and select either Windows x86-64 executable installer for 64-bit or Windows x86 executable installer for 32-bit Install by double-clicking on the downloaded file. Mac \u00b6 Install Homebrew by opening a Terminal window and pasting the following line. /usr/bin/ruby -e $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install) Homebrew asks you to enter your password so it can finalize the installation. Enter your user account password and hit enter Once Homebrew has finished installing, return to your terminal and run the following command: brew install python3 Linux \u00b6 Open a terminal window and run the following commands: sudo apt-get install python3.6 sudo apt install python3-pip Compiling \u00b6 Other Useful Software \u00b6 EDFBrowser \u00b6 EDFBrowser (developed by Teunis van Beelen) is a free, open-source, viewer/toolbox for EEG/IEEG data. It is a great tool to use when attempting to organize your input directory for edf2bids . Windows \u00b6 For 64-bit windows download this file . For 32-bit Windows download this file . Mac \u00b6 You can download the latests .dmg file from this website . Linux \u00b6 To install on Linux, you must first have the dependencies installed ( g++ , Qt5 ): sudo apt-get update sudo apt-get install g++ make git qtbase5-dev-tools qtbase5-dev qt5-default Then enter the following commands to download and install: git clone https://gitlab.com/Teuniz/EDFbrowser.git cd EDFbrowser qmake make -j4 sudo make install edfbrowser","title":"Installation"},{"location":"installation.html#installation","text":"There are a few ways to install edf2bids . For those looking to simply run the software you should install a compiled version .","title":"Installation"},{"location":"installation.html#obtain-pre-compiled-versions","text":"","title":"Obtain pre-compiled versions"},{"location":"installation.html#windows","text":"For 32-bit and 64-bit Windows download and extract this folder .","title":"Windows"},{"location":"installation.html#compile-from-source","text":"The source code can be download from the GitHub repository .","title":"Compile from source"},{"location":"installation.html#python-setup","text":"First you will need to install Python, depending on what operating system you are using there are different approaches.","title":"Python Setup"},{"location":"installation.html#windows_1","text":"You will need to download the windows python installer . Underneath the heading at the top that says Python Releases for Windows, click on the link for the Latest Python 3 Release - Python 3.x.x Scroll to the bottom and select either Windows x86-64 executable installer for 64-bit or Windows x86 executable installer for 32-bit Install by double-clicking on the downloaded file.","title":"Windows"},{"location":"installation.html#mac","text":"Install Homebrew by opening a Terminal window and pasting the following line. /usr/bin/ruby -e $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install) Homebrew asks you to enter your password so it can finalize the installation. Enter your user account password and hit enter Once Homebrew has finished installing, return to your terminal and run the following command: brew install python3","title":"Mac"},{"location":"installation.html#linux","text":"Open a terminal window and run the following commands: sudo apt-get install python3.6 sudo apt install python3-pip","title":"Linux"},{"location":"installation.html#compiling","text":"","title":"Compiling"},{"location":"installation.html#other-useful-software","text":"","title":"Other Useful Software"},{"location":"installation.html#edfbrowser","text":"EDFBrowser (developed by Teunis van Beelen) is a free, open-source, viewer/toolbox for EEG/IEEG data. It is a great tool to use when attempting to organize your input directory for edf2bids .","title":"EDFBrowser"},{"location":"installation.html#windows_2","text":"For 64-bit windows download this file . For 32-bit Windows download this file .","title":"Windows"},{"location":"installation.html#mac_1","text":"You can download the latests .dmg file from this website .","title":"Mac"},{"location":"installation.html#linux_1","text":"To install on Linux, you must first have the dependencies installed ( g++ , Qt5 ): sudo apt-get update sudo apt-get install g++ make git qtbase5-dev-tools qtbase5-dev qt5-default Then enter the following commands to download and install: git clone https://gitlab.com/Teuniz/EDFbrowser.git cd EDFbrowser qmake make -j4 sudo make install edfbrowser","title":"Linux"},{"location":"ui_components/bids_output.html","text":"Output Folder Structure \u00b6 BIDs Output Structure \u00b6 The output folder will look like the following (each subject having their own directory): code: this folder will contain the code used to convert the EDF/EDF+ data for each EDF/EDF+ file for the subjects. dataset_description.json: this file will contain the Json Metadata you previously defined. This is overall information about the dataset participants.tsv: this file contains a list of all the subjects in the dataset and their general demographics (i.e. age, sex etc.). This file can also be used to store additional subject information that is not variable over the different visits and sessions. Subject Directory \u00b6 Within each subject directory there will be a different session folder for each day of recording. *_scans.tsv: this file contains general information about each EDF file for the subject (i.e. filename, recording duration, EDF+ type etc.). Session Directory \u00b6 Within each session folder there will be a modality folder (either eeg or ieeg), inside that will be five files, containing different information associated with the specific EDF/EDF+ file. This file can also be used to store additional metadata information that varies from one recording to the next. *_electrodes.tsv: contains information associated with the electrodes used to collect the data. *_annotations.tsv: contains all annotations present in the EDF/EDF+ file, identifiers have been scrubbed. *_channels.tsv: contains information about each channel that was used in the recording. *_eeg.json/ or *_ieeg.json: contains metadata information about the EDF/EDF+ file. *_eeg.edf/ or *_ieeg.edf: contains the data in the de-identified EDF/EDF+ file. Example \u00b6 $(document).ready(function() { $.ajax({ url : \"../../assets/bids_dir.json\", dataType: \"text\", success : function (tree) { $('#tree').bstreeview({ data: tree }); } }); });","title":"Output Folder Structure"},{"location":"ui_components/bids_output.html#output-folder-structure","text":"","title":"Output Folder Structure"},{"location":"ui_components/bids_output.html#bids-output-structure","text":"The output folder will look like the following (each subject having their own directory): code: this folder will contain the code used to convert the EDF/EDF+ data for each EDF/EDF+ file for the subjects. dataset_description.json: this file will contain the Json Metadata you previously defined. This is overall information about the dataset participants.tsv: this file contains a list of all the subjects in the dataset and their general demographics (i.e. age, sex etc.). This file can also be used to store additional subject information that is not variable over the different visits and sessions.","title":"BIDs Output Structure"},{"location":"ui_components/bids_output.html#subject-directory","text":"Within each subject directory there will be a different session folder for each day of recording. *_scans.tsv: this file contains general information about each EDF file for the subject (i.e. filename, recording duration, EDF+ type etc.).","title":"Subject Directory"},{"location":"ui_components/bids_output.html#session-directory","text":"Within each session folder there will be a modality folder (either eeg or ieeg), inside that will be five files, containing different information associated with the specific EDF/EDF+ file. This file can also be used to store additional metadata information that varies from one recording to the next. *_electrodes.tsv: contains information associated with the electrodes used to collect the data. *_annotations.tsv: contains all annotations present in the EDF/EDF+ file, identifiers have been scrubbed. *_channels.tsv: contains information about each channel that was used in the recording. *_eeg.json/ or *_ieeg.json: contains metadata information about the EDF/EDF+ file. *_eeg.edf/ or *_ieeg.edf: contains the data in the de-identified EDF/EDF+ file.","title":"Session Directory"},{"location":"ui_components/bids_output.html#example","text":"$(document).ready(function() { $.ajax({ url : \"../../assets/bids_dir.json\", dataType: \"text\", success : function (tree) { $('#tree').bstreeview({ data: tree }); } }); });","title":"Example"},{"location":"ui_components/check_edf_type.html","text":"Check EDF Type \u00b6 EDF Type Overview \u00b6 Only EDF+ files can be stored in either a continuous (EDF+C) or discontinuous (EDF+D) format, while EDF files can only be continuous. A discontinuity within the EDF+ file would occur when the recording is stopped and subsequently started again, resulting in a lapse in recording time. There are two ways to account for the missing data during the non-recording period: Continuous: to keep the timeline in the file continuous, the data record during the non-recording time can be filled with zeros. This would maintain the timeline within the file. Discontinuous: ignore the time the recording stopped and \"Glue\" the different recording sessions together. This creates a jump in the timeline of the EDF+ file. For most applications, the EDF+ file will need to be in EDF+C format. The majority of softwares and analysis tools require this. Convert EDF Type \u00b6 You need to ensure all EDF+ files are in continuous format (EDF+C). This is easy to check within edf2bids . Ensure your input directory has been organzied prior to opening within edf2bids . Within edf2bids select the input directory and check the EDF Type column. You should flag any file that is in EDF+D format. Once you have identified the files that are in EDF+D format, open EDFBrowser, select Tools at the top and Convert EDF+D to EDF+C . A Dialog box will open allowing you to select one of the identified files that is in EDF+D format, select one file. Once conversion is complete you will notice the original file remains but now there are several smaller files with a 4 digit suffix accounting for the number of times the recording was stopped/started","title":"Check EDF Type"},{"location":"ui_components/check_edf_type.html#check-edf-type","text":"","title":"Check EDF Type"},{"location":"ui_components/check_edf_type.html#edf-type-overview","text":"Only EDF+ files can be stored in either a continuous (EDF+C) or discontinuous (EDF+D) format, while EDF files can only be continuous. A discontinuity within the EDF+ file would occur when the recording is stopped and subsequently started again, resulting in a lapse in recording time. There are two ways to account for the missing data during the non-recording period: Continuous: to keep the timeline in the file continuous, the data record during the non-recording time can be filled with zeros. This would maintain the timeline within the file. Discontinuous: ignore the time the recording stopped and \"Glue\" the different recording sessions together. This creates a jump in the timeline of the EDF+ file. For most applications, the EDF+ file will need to be in EDF+C format. The majority of softwares and analysis tools require this.","title":"EDF Type Overview"},{"location":"ui_components/check_edf_type.html#convert-edf-type","text":"You need to ensure all EDF+ files are in continuous format (EDF+C). This is easy to check within edf2bids . Ensure your input directory has been organzied prior to opening within edf2bids . Within edf2bids select the input directory and check the EDF Type column. You should flag any file that is in EDF+D format. Once you have identified the files that are in EDF+D format, open EDFBrowser, select Tools at the top and Convert EDF+D to EDF+C . A Dialog box will open allowing you to select one of the identified files that is in EDF+D format, select one file. Once conversion is complete you will notice the original file remains but now there are several smaller files with a 4 digit suffix accounting for the number of times the recording was stopped/started","title":"Convert EDF Type"},{"location":"ui_components/definitions.html","text":"Definitions \u00b6 Filename terms \u00b6 Throughout this documentation the following filename terms will be used: term definition sub_num specific subject number visit_num each stay within the hospital (2 digits) ses_num each day spent in hospital during the visit (2 digits starting with SE, ex. SE01) type type of data collected (should be _IEEG/_EEG) task format of the edf data (should be _CLIP/_FULL/_CS) RET [optional] indicates the study is retrospective 1 1 if not present then study assumed to be prospective (PRO), so you do not need to include this flag for prospective sessions Note on Visit Numbers If any retrospective studies exist for a subject, they should be assigned the first visit number 01 All following admissions to the hospital would be given incremental visit numbers (i.e. visit 2: 02, visit 3: 03) Two separate admissions to the hospital should not have the same visit number Scalp and Intracranial recordings should have distinct visit numbers (ex. If 01 is used for the participant\u2019s first stay in the EMU for scalp EEG, 02 should be used if they come back for intracranial EEG) Note on Session Numbers If a day in sequence of sessions is missing/not present this session number should still be accounted for e.g. ses-001 ( data present ) , ses-002 ( data missing ) , ses-003 ( data present ) The directory naming would look like: sub-003_01_SE01_IEEG_FULL_RET sub-003_01_SE03_IEEG_FULL_RET Notice that no folder is specified for the missing ses-002 but the number is still accounted for by skipping it. edf2bids terms \u00b6 Within the edf2bids software, the columns present within the input/output windows are: term definition Name this is the name of the subdirectory within the patient folder that contains the EDF/EDF+ file. If the EDF/EDF+ files are all in the same directory, then the name will be the name of the EDF/EDF+ files. Date the date the data was recorded Time the time the data was recorded Size the size of the EDF/EDF+ file in gigabytes Frequency [modifiable] the frequency the data was recorded at. This is automatically calculated based on information extracted from the EDF/EDF+ file. However, if there is an error then the user can double click on the frequency box and manually change it Duration the total duration of the EDF/EDF+ file recording, which is automatically calculated EDF Type type of EDF+ file (EDF+D/EDF+C). This field should always show EDF+C, if EDF+D then the file should be converted first Type [selectable] the type of EEG data collected (Intracranial or Scalp). This value is automatically detected by the flags _EEG/_IEEG used in the directory name. This value can be changed by the user if there is an error Task [selectable] the condition of the recorded file: Full, clip or cortical stimulation (CS). This value is automatically detected by the flags _CLIP/_FULL/_CS used in the directory name. This can be changed by the user if there is an error Ret/Pro [selectable] whether the data file is retrospective or prospective. This value is automatically detected based on the RET flag used in the directory name. This value can be changed by the user if there is an error Channel File this indicates if a channel_labels.txt file was found. If you notice the labels changed in a specific session you can include a channel_label.txt file within each session folder. Yes indicates a channel label file was found, No otherwise Imaging Data this indicates if an imaging directory was found in the root of the subjects directory. Yes indicates the directory was found, No otherwise","title":"Definitions"},{"location":"ui_components/definitions.html#definitions","text":"","title":"Definitions"},{"location":"ui_components/definitions.html#filename-terms","text":"Throughout this documentation the following filename terms will be used: term definition sub_num specific subject number visit_num each stay within the hospital (2 digits) ses_num each day spent in hospital during the visit (2 digits starting with SE, ex. SE01) type type of data collected (should be _IEEG/_EEG) task format of the edf data (should be _CLIP/_FULL/_CS) RET [optional] indicates the study is retrospective 1 1 if not present then study assumed to be prospective (PRO), so you do not need to include this flag for prospective sessions Note on Visit Numbers If any retrospective studies exist for a subject, they should be assigned the first visit number 01 All following admissions to the hospital would be given incremental visit numbers (i.e. visit 2: 02, visit 3: 03) Two separate admissions to the hospital should not have the same visit number Scalp and Intracranial recordings should have distinct visit numbers (ex. If 01 is used for the participant\u2019s first stay in the EMU for scalp EEG, 02 should be used if they come back for intracranial EEG) Note on Session Numbers If a day in sequence of sessions is missing/not present this session number should still be accounted for e.g. ses-001 ( data present ) , ses-002 ( data missing ) , ses-003 ( data present ) The directory naming would look like: sub-003_01_SE01_IEEG_FULL_RET sub-003_01_SE03_IEEG_FULL_RET Notice that no folder is specified for the missing ses-002 but the number is still accounted for by skipping it.","title":"Filename terms"},{"location":"ui_components/definitions.html#edf2bids-terms","text":"Within the edf2bids software, the columns present within the input/output windows are: term definition Name this is the name of the subdirectory within the patient folder that contains the EDF/EDF+ file. If the EDF/EDF+ files are all in the same directory, then the name will be the name of the EDF/EDF+ files. Date the date the data was recorded Time the time the data was recorded Size the size of the EDF/EDF+ file in gigabytes Frequency [modifiable] the frequency the data was recorded at. This is automatically calculated based on information extracted from the EDF/EDF+ file. However, if there is an error then the user can double click on the frequency box and manually change it Duration the total duration of the EDF/EDF+ file recording, which is automatically calculated EDF Type type of EDF+ file (EDF+D/EDF+C). This field should always show EDF+C, if EDF+D then the file should be converted first Type [selectable] the type of EEG data collected (Intracranial or Scalp). This value is automatically detected by the flags _EEG/_IEEG used in the directory name. This value can be changed by the user if there is an error Task [selectable] the condition of the recorded file: Full, clip or cortical stimulation (CS). This value is automatically detected by the flags _CLIP/_FULL/_CS used in the directory name. This can be changed by the user if there is an error Ret/Pro [selectable] whether the data file is retrospective or prospective. This value is automatically detected based on the RET flag used in the directory name. This value can be changed by the user if there is an error Channel File this indicates if a channel_labels.txt file was found. If you notice the labels changed in a specific session you can include a channel_label.txt file within each session folder. Yes indicates a channel label file was found, No otherwise Imaging Data this indicates if an imaging directory was found in the root of the subjects directory. Yes indicates the directory was found, No otherwise","title":"edf2bids terms"},{"location":"ui_components/input_dir_setup.html","text":"Input Directory Setup \u00b6 This section outlines how the data should be organized prior to running the edf2bids software. The data files should be in EDF/EDF+ format following the specifications provided by the EDF format developers. It is recommemded you organize your data based on the working directory schema described in the ensuing section. The root input directory ( input ) should contain a sub-directory for each of the subjects you want to have converted (i.e. input\\sub-001 , input\\sub-002 etc.). Note At this moment the names of the EDF/EDF+ files are not yet BIDS compliant, but they do contain some metadata in the filename that will be used later. Setup a working directory \u00b6 It is recommended that you establish a working directory to ensure your data remains organized. The optimal setup would be one with 4 directories: unorganized : this directory holds unorganized subject data ready to be organized for edf2bids organized : this directory holds organized subject data ready to be organized for edf2bids (according to either option below) input : this directory holds subject data ready to be converted with edf2bids output : this directory holds the output converted data from edf2bids Warning When beginning a conversion with edf2bids ensure the output directory is empty and the input directory only contains the subject folders you wish to convert. Example \u00b6 Static \u00b6 working_dir/ \u251c\u2500\u2500 unorganized/ \u251c\u2500\u2500 organized/ \u251c\u2500\u2500 input/ \u2514\u2500\u2500 output/ Interactive \u00b6 $(document).ready(function() { $.ajax({ url : \"../../assets/working_dir.json\", dataType: \"text\", success : function (tree) { $('#tree').bstreeview({ data: tree }); } }); }); Option 01: Do not specify visit/session number \u00b6 If you do not need to specify the visit or session number for each EDF file for the subjects, then this option will assign session numbers based on the Date timestamp within the EDF files. So the earliest EDF file will be given ses-001 while the latest EDF file will be given ses-### (### will be equal to the number of EDF files for that subject). Example \u00b6 Definition of terms for a complete list of terms see the definitions page Static \u00b6 input/ \u251c\u2500\u2500 <sub_num>/ # Individual subject directory \u2502 \u251c\u2500\u2500 X~X_432a35cf-adg25-462-24aa-325db4e5e2d3.edf # Individual EDF files \u2502 \u2514\u2500\u2500 X~Xe_7d22151a-ac455-3adc312b-426aae3251ac.edf \u2502 \u2514\u2500\u2500 <sub_num>/ # Individual subject directory \u251c\u2500\u2500 X_ X_35a1ed7a-7764-4cb0-8571-51026e3dbef4.edf # Individual EDF files \u2514\u2500\u2500 X_X_e515c5ac-6301-4acd-8a69-fb208d5fd097.edf Interactive \u00b6 $(document).ready(function() { $.ajax({ url : \"../../assets/no_ses_visit.json\", dataType: \"text\", success : function (tree) { $('#tree2').bstreeview({ data: tree }); } }); }); Option 02: Specify visit/session number \u00b6 In some instances you may want to manually assign the specific visit or session numbers for the EDF files. In this scenario you would need to place each EDF file into a directory with the following naming scheme: <sub_num>_<visit_num>_<ses_num>_<type>_<task>_ [ RET ] Definition of terms for a complete list of terms see the definitions page sub-003_02_SE01_IEEG_FULL_RET A folder with the above naming scheme would indicate this is subject 3's second visit and first session. The data collected was a full IEEG recording that was retrospective (recorded prior to the subject consent). Example \u00b6 Each day of recording should be in a separate folder within the subject directory: Static \u00b6 input/ \u251c\u2500\u2500 <sub_num>/ # Individual subject directory \u2502 \u2502 \u2502 \u251c\u2500\u2500 <sub_num>_<visit_num>_<ses_num>_<type>_<task>_ [ RET ] / # Specify visit, session, type, and task \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 X~X_432a35cf-adg25-462-24aa-325db4e5e2d3.edf # Individual EDF files \u2502 \u2502 \u2514\u2500\u2500 X~Xe_7d22151a-ac455-3adc312b-426aae3251ac.edf # Individual EDF files \u2502 \u2502 \u2502 \u2514\u2500\u2500 <sub_num>_<visit_num>_<ses_num>_<type>_<task>_ [ RET ] / # Specify visit, session, type, and task \u2502 \u2502 \u2502 \u2514\u2500\u2500 X~X_432a35cf-adg25-462-24aa-325db4e5e2d3.edf # Individual EDF files \u2502 \u2514\u2500\u2500 <sub_num>/ # Individual subject directory \u2502 \u2514\u2500\u2500 <sub_num>_<visit_num>_<ses_num>_<type>_<task>_ [ RET ] / # Specify visit, session, type, and task \u2502 \u251c\u2500\u2500 X~X_432a35cf-adg25-462-24aa-325db4e5e2d3.edf # Individual EDF files \u2514\u2500\u2500 LastName~ FirstName_7d22151a-ac455-3adc312b-426aae3251ac.edf # You can include the subject first/last name to be used when de-identifying the data Interactive \u00b6 $(document).ready(function() { $.ajax({ url : \"../../assets/specify_ses_visit.json\", dataType: \"text\", success : function (tree) { $('#tree3').bstreeview({ data: tree }); } }); }); Imaging Data \u00b6 edf2bids will anonymize imaging DICOM files if they are present within the input directory. The DICOMs should be within a directory named imaging , which is at the root of the subjects directory. Within the imaging directory should be another directory with the desired output name for the zipped directory (containing all the anonymized DICOMs). The directories containing the actual DICOM files can be given any name, genrally they are named after the specific sequence aquired for the DICOMs inside. Example \u00b6 Static \u00b6 input/ \u251c\u2500\u2500 <sub_num>/ # Individual subject directory \u251c\u2500\u2500 X~X_432a35cf-adg25-462-24aa-325db4e5e2d3.edf # Individual EDF files \u251c\u2500\u2500 X~Xe_7d22151a-ac455-3adc312b-426aae3251ac.edf \u2514\u2500\u2500 <imaging>/ # Imaging directory for dicoms \u2514\u2500\u2500 <sub_num>_<visit_num>_<ses_num>/ # session directory for dicoms, this name will be given to output zipped folder \u251c\u2500\u2500 T1w_scan/<*.dcm files> # DICOM directories, can be given any name \u251c\u2500\u2500 T2w_scan/<*.dcm files> \u2514\u2500\u2500 dwi/<*.dcm files> Interactive \u00b6 $(document).ready(function() { $.ajax({ url : \"../../assets/imaging_data.json\", dataType: \"text\", success : function (tree) { $('#tree4').bstreeview({ data: tree }); } }); });","title":"Input Directory Setup"},{"location":"ui_components/input_dir_setup.html#input-directory-setup","text":"This section outlines how the data should be organized prior to running the edf2bids software. The data files should be in EDF/EDF+ format following the specifications provided by the EDF format developers. It is recommemded you organize your data based on the working directory schema described in the ensuing section. The root input directory ( input ) should contain a sub-directory for each of the subjects you want to have converted (i.e. input\\sub-001 , input\\sub-002 etc.). Note At this moment the names of the EDF/EDF+ files are not yet BIDS compliant, but they do contain some metadata in the filename that will be used later.","title":"Input Directory Setup"},{"location":"ui_components/input_dir_setup.html#setup-a-working-directory","text":"It is recommended that you establish a working directory to ensure your data remains organized. The optimal setup would be one with 4 directories: unorganized : this directory holds unorganized subject data ready to be organized for edf2bids organized : this directory holds organized subject data ready to be organized for edf2bids (according to either option below) input : this directory holds subject data ready to be converted with edf2bids output : this directory holds the output converted data from edf2bids Warning When beginning a conversion with edf2bids ensure the output directory is empty and the input directory only contains the subject folders you wish to convert.","title":"Setup a working directory"},{"location":"ui_components/input_dir_setup.html#example","text":"","title":"Example"},{"location":"ui_components/input_dir_setup.html#static","text":"working_dir/ \u251c\u2500\u2500 unorganized/ \u251c\u2500\u2500 organized/ \u251c\u2500\u2500 input/ \u2514\u2500\u2500 output/","title":"Static"},{"location":"ui_components/input_dir_setup.html#interactive","text":"$(document).ready(function() { $.ajax({ url : \"../../assets/working_dir.json\", dataType: \"text\", success : function (tree) { $('#tree').bstreeview({ data: tree }); } }); });","title":"Interactive"},{"location":"ui_components/input_dir_setup.html#option-01-do-not-specify-visitsession-number","text":"If you do not need to specify the visit or session number for each EDF file for the subjects, then this option will assign session numbers based on the Date timestamp within the EDF files. So the earliest EDF file will be given ses-001 while the latest EDF file will be given ses-### (### will be equal to the number of EDF files for that subject).","title":"Option 01: Do not specify visit/session number"},{"location":"ui_components/input_dir_setup.html#example_1","text":"Definition of terms for a complete list of terms see the definitions page","title":"Example"},{"location":"ui_components/input_dir_setup.html#static_1","text":"input/ \u251c\u2500\u2500 <sub_num>/ # Individual subject directory \u2502 \u251c\u2500\u2500 X~X_432a35cf-adg25-462-24aa-325db4e5e2d3.edf # Individual EDF files \u2502 \u2514\u2500\u2500 X~Xe_7d22151a-ac455-3adc312b-426aae3251ac.edf \u2502 \u2514\u2500\u2500 <sub_num>/ # Individual subject directory \u251c\u2500\u2500 X_ X_35a1ed7a-7764-4cb0-8571-51026e3dbef4.edf # Individual EDF files \u2514\u2500\u2500 X_X_e515c5ac-6301-4acd-8a69-fb208d5fd097.edf","title":"Static"},{"location":"ui_components/input_dir_setup.html#interactive_1","text":"$(document).ready(function() { $.ajax({ url : \"../../assets/no_ses_visit.json\", dataType: \"text\", success : function (tree) { $('#tree2').bstreeview({ data: tree }); } }); });","title":"Interactive"},{"location":"ui_components/input_dir_setup.html#option-02-specify-visitsession-number","text":"In some instances you may want to manually assign the specific visit or session numbers for the EDF files. In this scenario you would need to place each EDF file into a directory with the following naming scheme: <sub_num>_<visit_num>_<ses_num>_<type>_<task>_ [ RET ] Definition of terms for a complete list of terms see the definitions page sub-003_02_SE01_IEEG_FULL_RET A folder with the above naming scheme would indicate this is subject 3's second visit and first session. The data collected was a full IEEG recording that was retrospective (recorded prior to the subject consent).","title":"Option 02: Specify visit/session number"},{"location":"ui_components/input_dir_setup.html#example_2","text":"Each day of recording should be in a separate folder within the subject directory:","title":"Example"},{"location":"ui_components/input_dir_setup.html#static_2","text":"input/ \u251c\u2500\u2500 <sub_num>/ # Individual subject directory \u2502 \u2502 \u2502 \u251c\u2500\u2500 <sub_num>_<visit_num>_<ses_num>_<type>_<task>_ [ RET ] / # Specify visit, session, type, and task \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 X~X_432a35cf-adg25-462-24aa-325db4e5e2d3.edf # Individual EDF files \u2502 \u2502 \u2514\u2500\u2500 X~Xe_7d22151a-ac455-3adc312b-426aae3251ac.edf # Individual EDF files \u2502 \u2502 \u2502 \u2514\u2500\u2500 <sub_num>_<visit_num>_<ses_num>_<type>_<task>_ [ RET ] / # Specify visit, session, type, and task \u2502 \u2502 \u2502 \u2514\u2500\u2500 X~X_432a35cf-adg25-462-24aa-325db4e5e2d3.edf # Individual EDF files \u2502 \u2514\u2500\u2500 <sub_num>/ # Individual subject directory \u2502 \u2514\u2500\u2500 <sub_num>_<visit_num>_<ses_num>_<type>_<task>_ [ RET ] / # Specify visit, session, type, and task \u2502 \u251c\u2500\u2500 X~X_432a35cf-adg25-462-24aa-325db4e5e2d3.edf # Individual EDF files \u2514\u2500\u2500 LastName~ FirstName_7d22151a-ac455-3adc312b-426aae3251ac.edf # You can include the subject first/last name to be used when de-identifying the data","title":"Static"},{"location":"ui_components/input_dir_setup.html#interactive_2","text":"$(document).ready(function() { $.ajax({ url : \"../../assets/specify_ses_visit.json\", dataType: \"text\", success : function (tree) { $('#tree3').bstreeview({ data: tree }); } }); });","title":"Interactive"},{"location":"ui_components/input_dir_setup.html#imaging-data","text":"edf2bids will anonymize imaging DICOM files if they are present within the input directory. The DICOMs should be within a directory named imaging , which is at the root of the subjects directory. Within the imaging directory should be another directory with the desired output name for the zipped directory (containing all the anonymized DICOMs). The directories containing the actual DICOM files can be given any name, genrally they are named after the specific sequence aquired for the DICOMs inside.","title":"Imaging Data"},{"location":"ui_components/input_dir_setup.html#example_3","text":"","title":"Example"},{"location":"ui_components/input_dir_setup.html#static_3","text":"input/ \u251c\u2500\u2500 <sub_num>/ # Individual subject directory \u251c\u2500\u2500 X~X_432a35cf-adg25-462-24aa-325db4e5e2d3.edf # Individual EDF files \u251c\u2500\u2500 X~Xe_7d22151a-ac455-3adc312b-426aae3251ac.edf \u2514\u2500\u2500 <imaging>/ # Imaging directory for dicoms \u2514\u2500\u2500 <sub_num>_<visit_num>_<ses_num>/ # session directory for dicoms, this name will be given to output zipped folder \u251c\u2500\u2500 T1w_scan/<*.dcm files> # DICOM directories, can be given any name \u251c\u2500\u2500 T2w_scan/<*.dcm files> \u2514\u2500\u2500 dwi/<*.dcm files>","title":"Static"},{"location":"ui_components/input_dir_setup.html#interactive_3","text":"$(document).ready(function() { $.ajax({ url : \"../../assets/imaging_data.json\", dataType: \"text\", success : function (tree) { $('#tree4').bstreeview({ data: tree }); } }); });","title":"Interactive"},{"location":"ui_components/overview.html","text":"Overview \u00b6 This section describes steps required to use edf2bids . If you have not installed edf2bids you have two options: Install a compiled version Compile from source code The following steps should be taken sequentially: Organize your input directory Check EDF file type Adjust software settings Confirm input directory data Confirm output directory data Check output folder data Convert/Upload data to SPReD [optional]","title":"Overview"},{"location":"ui_components/overview.html#overview","text":"This section describes steps required to use edf2bids . If you have not installed edf2bids you have two options: Install a compiled version Compile from source code The following steps should be taken sequentially: Organize your input directory Check EDF file type Adjust software settings Confirm input directory data Confirm output directory data Check output folder data Convert/Upload data to SPReD [optional]","title":"Overview"},{"location":"ui_components/run_conversion.html","text":"Run Conversion \u00b6 Input directory selection \u00b6 The input directory selected here should be organized according to the first section in this documentation. Prior to loading the data, make sure all the settings in the settings panel have been configured to your specification (found at the bottom left of the main window). In the software, select Input Directory and choose the directory that contains the data to be converted (select the main/root directory that contains all subject directories). Click Select Folder in the window and the data will load into the Input Directory window. You will now be able to review the information that was detected about the input files. Each subject is expandable by clicking the box beside the subject name. The columns displayed are: Definition of columns for a complete list of column explanations see the definitions page Output directory selection \u00b6 Once you have confirmed the input data is correct, click Output Directory and select the directory you want the BIDS dataset to appear. The Output Directory window will now present the final output file information (prior to conversion). This is the final check to ensure that any changes have been updated. Note EDF/EDF+ files in the Input Directory will be COPIED to the new location and will be renamed to be BIDS compliant. Thus, you will have two copies of the EDF/EDF+ files. This is a safety measure in case an error occurs in the conversion, the source data will remain intact. If you are converting data for a participant that already has recordings in the output folder, the checkboxes for those recordings will appear checked in the Output Directory window. Convert to BIDs \u00b6 Once you have confirmed the Output Directory file information is correct press the green Convert button. During the conversion process you can cancel the conversion at any time by pressing the Cancel button. However, if you cancel the conversion you will need to delete the contents of the output directory and start over. You will receive updates in the Conversion Status window. The final notice, once the conversion is complete, will show Your data has been BIDsified! . Convert to SPReD (EpLink) \u00b6 The format required to upload the Brain-CODE is different from BIDS. This conversion step will provide a SPReD compliant format output. Following successful conversion to BIDS, a new button in the main window will become active names SPReD . Note files will be moved from the BIDs structure so the BIDs format will be destroyed. Press the SPReD button and a new directory will be created in the output directory folder. All the older BIDs files that are not used will be transferred to bids_old . The SPReD directory will look like: Within each subdirectory of the .zip folders the same files from the BIDS format will be found: You will be uploading the .zip directories to Brain-CODE.","title":"Run Conversion"},{"location":"ui_components/run_conversion.html#run-conversion","text":"","title":"Run Conversion"},{"location":"ui_components/run_conversion.html#input-directory-selection","text":"The input directory selected here should be organized according to the first section in this documentation. Prior to loading the data, make sure all the settings in the settings panel have been configured to your specification (found at the bottom left of the main window). In the software, select Input Directory and choose the directory that contains the data to be converted (select the main/root directory that contains all subject directories). Click Select Folder in the window and the data will load into the Input Directory window. You will now be able to review the information that was detected about the input files. Each subject is expandable by clicking the box beside the subject name. The columns displayed are: Definition of columns for a complete list of column explanations see the definitions page","title":"Input directory selection"},{"location":"ui_components/run_conversion.html#output-directory-selection","text":"Once you have confirmed the input data is correct, click Output Directory and select the directory you want the BIDS dataset to appear. The Output Directory window will now present the final output file information (prior to conversion). This is the final check to ensure that any changes have been updated. Note EDF/EDF+ files in the Input Directory will be COPIED to the new location and will be renamed to be BIDS compliant. Thus, you will have two copies of the EDF/EDF+ files. This is a safety measure in case an error occurs in the conversion, the source data will remain intact. If you are converting data for a participant that already has recordings in the output folder, the checkboxes for those recordings will appear checked in the Output Directory window.","title":"Output directory selection"},{"location":"ui_components/run_conversion.html#convert-to-bids","text":"Once you have confirmed the Output Directory file information is correct press the green Convert button. During the conversion process you can cancel the conversion at any time by pressing the Cancel button. However, if you cancel the conversion you will need to delete the contents of the output directory and start over. You will receive updates in the Conversion Status window. The final notice, once the conversion is complete, will show Your data has been BIDsified! .","title":"Convert to BIDs"},{"location":"ui_components/run_conversion.html#convert-to-spred-eplink","text":"The format required to upload the Brain-CODE is different from BIDS. This conversion step will provide a SPReD compliant format output. Following successful conversion to BIDS, a new button in the main window will become active names SPReD . Note files will be moved from the BIDs structure so the BIDs format will be destroyed. Press the SPReD button and a new directory will be created in the output directory folder. All the older BIDs files that are not used will be transferred to bids_old . The SPReD directory will look like: Within each subdirectory of the .zip folders the same files from the BIDS format will be found: You will be uploading the .zip directories to Brain-CODE.","title":"Convert to SPReD (EpLink)"},{"location":"ui_components/spred_upload.html","text":"SPReD Data Upload \u00b6 Upload Data To SPReD \u00b6 Login to SPReD and navigate to the EPL31 project for your site. Create a new subject by pulling down the New menu near the top of the screen and selecting Subject . This will take you to the new subject page. It is recommended that you enter the participant\u2019s age and gender however these are optional. The only required field is the Subject\u2019s ID. Press Submit at the bottom of the page when done. You are now on the main subject page. From here click Add Experiment on the right. On this page, select EEG Session . Enter the participant\u2019s session name and visit ID, these should be the same as the zip file name. It is also recommended that you enter the date of the recording, but it is not required. In the list of scans, click the scissors icon to delete all but the first row. In the remaining row enter 1 for Scan number and EEG for type. You may also optionally add a note about the scan. \u2b07 Press Submit at the bottom of the page when done. You are now on the main session page. From here click on Manage Files on the right. In the window that pops up, click on Add Folder . In the other window that pops up, for Level select scans , for Item select 1 and for Folder enter EEG . Once done click Create . Now click on Upload Files . In the window that pops up select the folder we just created, for Level select scans , for Item select 1 and for Folder select EEG . Now click on Browse\u2026 and navigate to the zip file corresponding with the session you wish to upload. Once the file has been selected, click on Upload . There will be another box that pops up asking you would like to extract the contents of the archive, click OK . You are done! If you have more EEG sessions to upload for this participant, you can go back to the main subject page by clicking on the navigation links at the top. You can then repeat from step 5 and on.","title":"SPReD Data Upload"},{"location":"ui_components/spred_upload.html#spred-data-upload","text":"","title":"SPReD Data Upload"},{"location":"ui_components/spred_upload.html#upload-data-to-spred","text":"Login to SPReD and navigate to the EPL31 project for your site. Create a new subject by pulling down the New menu near the top of the screen and selecting Subject . This will take you to the new subject page. It is recommended that you enter the participant\u2019s age and gender however these are optional. The only required field is the Subject\u2019s ID. Press Submit at the bottom of the page when done. You are now on the main subject page. From here click Add Experiment on the right. On this page, select EEG Session . Enter the participant\u2019s session name and visit ID, these should be the same as the zip file name. It is also recommended that you enter the date of the recording, but it is not required. In the list of scans, click the scissors icon to delete all but the first row. In the remaining row enter 1 for Scan number and EEG for type. You may also optionally add a note about the scan. \u2b07 Press Submit at the bottom of the page when done. You are now on the main session page. From here click on Manage Files on the right. In the window that pops up, click on Add Folder . In the other window that pops up, for Level select scans , for Item select 1 and for Folder enter EEG . Once done click Create . Now click on Upload Files . In the window that pops up select the folder we just created, for Level select scans , for Item select 1 and for Folder select EEG . Now click on Browse\u2026 and navigate to the zip file corresponding with the session you wish to upload. Once the file has been selected, click on Upload . There will be another box that pops up asking you would like to extract the contents of the archive, click OK . You are done! If you have more EEG sessions to upload for this participant, you can go back to the main subject page by clicking on the navigation links at the top. You can then repeat from step 5 and on.","title":"Upload Data To SPReD"},{"location":"ui_components/user_settings.html","text":"Adjusting User Settings \u00b6 Adjusting metadata settings \u00b6 In the software, select File then Settings . A settings panel will appear with two tabs: Json Metadata and Electrode Info. Json metadata contains general information about the dataset. Lab: what is the name of the lab collecting this data Experimenter: list all individuals involved in this dataset Dataset Name: overall name for the dataset. Institution Name/Address: name and address of the institution at which this dataset was collected Electrode info contains information about the specific electrodes used at the center: Manufacturer: who produces the electrodes. Type: what type of electrode is it (i.e. depth, scalp etc.) Material: what material are the electrodes made from (i.e. platinum) Diameter: what is the diameter of the electrode Once you have modified the information click Save and the information will be stored and used for every subsequent dataset processed by edf2bids . You will not need to re-define these values, unless they change at your site. Main window settings panel \u00b6 The settings panel is located at the bottom left of the main window. De-identify input directory : if this is selected the input EDF/EDF+ files will be de-identified first prior to being copied. If left unchecked, then only the output directory EDF/EDF+ files will be de-identified. Default is unchecked. Offset dates : if selected all dates in the EDF/EDF+ files will be offset by a random number of days (~1000 days). The offset value can be determined but is securely stored. Test conversion : this should only be selected if testing the software on new data. This option will not copy the EDF/EDF+ files or read the annotations. This means it will quickly run through the data and output a BIDS structure without the EDF/EDF+ file.","title":"Adjust User Settings"},{"location":"ui_components/user_settings.html#adjusting-user-settings","text":"","title":"Adjusting User Settings"},{"location":"ui_components/user_settings.html#adjusting-metadata-settings","text":"In the software, select File then Settings . A settings panel will appear with two tabs: Json Metadata and Electrode Info. Json metadata contains general information about the dataset. Lab: what is the name of the lab collecting this data Experimenter: list all individuals involved in this dataset Dataset Name: overall name for the dataset. Institution Name/Address: name and address of the institution at which this dataset was collected Electrode info contains information about the specific electrodes used at the center: Manufacturer: who produces the electrodes. Type: what type of electrode is it (i.e. depth, scalp etc.) Material: what material are the electrodes made from (i.e. platinum) Diameter: what is the diameter of the electrode Once you have modified the information click Save and the information will be stored and used for every subsequent dataset processed by edf2bids . You will not need to re-define these values, unless they change at your site.","title":"Adjusting metadata settings"},{"location":"ui_components/user_settings.html#main-window-settings-panel","text":"The settings panel is located at the bottom left of the main window. De-identify input directory : if this is selected the input EDF/EDF+ files will be de-identified first prior to being copied. If left unchecked, then only the output directory EDF/EDF+ files will be de-identified. Default is unchecked. Offset dates : if selected all dates in the EDF/EDF+ files will be offset by a random number of days (~1000 days). The offset value can be determined but is securely stored. Test conversion : this should only be selected if testing the software on new data. This option will not copy the EDF/EDF+ files or read the annotations. This means it will quickly run through the data and output a BIDS structure without the EDF/EDF+ file.","title":"Main window settings panel"}]}